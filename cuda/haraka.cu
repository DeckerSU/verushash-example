/*
Plain C implementation of the Haraka256 and Haraka512 permutations.
*/
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#include "haraka_gpu.h"

//__device__ void memcpy_decker(unsigned char *dst, unsigned char *src, int len) {
//    int i;
//    for (i=0; i<len; i++) { dst[i] = src[i]; }
#define memcpy_decker memcpy
//}

__device__ __constant__ static const unsigned char sbox[256] =
{ 0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe,
  0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4,
  0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7,
  0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3,
  0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09,
  0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3,
  0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe,
  0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85,
  0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92,
  0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c,
  0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19,
  0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14,
  0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2,
  0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5,
  0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25,
  0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
  0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86,
  0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e,
  0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42,
  0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 };

__device__ __constant__ static const unsigned char smod[256] =
{ 0x00, 0x03, 0x06, 0x05, 0x0C, 0x0F, 0x0A, 0x09, 0x18, 0x1B, 0x1E, 0x1D, 0x14, 
  0x17, 0x12, 0x11, 0x30, 0x33, 0x36, 0x35, 0x3C, 0x3F, 0x3A, 0x39, 0x28, 0x2B, 
  0x2E, 0x2D, 0x24, 0x27, 0x22, 0x21, 0x60, 0x63, 0x66, 0x65, 0x6C, 0x6F, 0x6A, 
  0x69, 0x78, 0x7B, 0x7E, 0x7D, 0x74, 0x77, 0x72, 0x71, 0x50, 0x53, 0x56, 0x55, 
  0x5C, 0x5F, 0x5A, 0x59, 0x48, 0x4B, 0x4E, 0x4D, 0x44, 0x47, 0x42, 0x41, 0xC0, 
  0xC3, 0xC6, 0xC5, 0xCC, 0xCF, 0xCA, 0xC9, 0xD8, 0xDB, 0xDE, 0xDD, 0xD4, 0xD7, 
  0xD2, 0xD1, 0xF0, 0xF3, 0xF6, 0xF5, 0xFC, 0xFF, 0xFA, 0xF9, 0xE8, 0xEB, 0xEE, 
  0xED, 0xE4, 0xE7, 0xE2, 0xE1, 0xA0, 0xA3, 0xA6, 0xA5, 0xAC, 0xAF, 0xAA, 0xA9, 
  0xB8, 0xBB, 0xBE, 0xBD, 0xB4, 0xB7, 0xB2, 0xB1, 0x90, 0x93, 0x96, 0x95, 0x9C, 
  0x9F, 0x9A, 0x99, 0x88, 0x8B, 0x8E, 0x8D, 0x84, 0x87, 0x82, 0x81, 0x9B, 0x98, 
  0x9D, 0x9E, 0x97, 0x94, 0x91, 0x92, 0x83, 0x80, 0x85, 0x86, 0x8F, 0x8C, 0x89, 
  0x8A, 0xAB, 0xA8, 0xAD, 0xAE, 0xA7, 0xA4, 0xA1, 0xA2, 0xB3, 0xB0, 0xB5, 0xB6, 
  0xBF, 0xBC, 0xB9, 0xBA, 0xFB, 0xF8, 0xFD, 0xFE, 0xF7, 0xF4, 0xF1, 0xF2, 0xE3, 
  0xE0, 0xE5, 0xE6, 0xEF, 0xEC, 0xE9, 0xEA, 0xCB, 0xC8, 0xCD, 0xCE, 0xC7, 0xC4, 
  0xC1, 0xC2, 0xD3, 0xD0, 0xD5, 0xD6, 0xDF, 0xDC, 0xD9, 0xDA, 0x5B, 0x58, 0x5D, 
  0x5E, 0x57, 0x54, 0x51, 0x52, 0x43, 0x40, 0x45, 0x46, 0x4F, 0x4C, 0x49, 0x4A, 
  0x6B, 0x68, 0x6D, 0x6E, 0x67, 0x64, 0x61, 0x62, 0x73, 0x70, 0x75, 0x76, 0x7F, 
  0x7C, 0x79, 0x7A, 0x3B, 0x38, 0x3D, 0x3E, 0x37, 0x34, 0x31, 0x32, 0x23, 0x20, 
  0x25, 0x26, 0x2F, 0x2C, 0x29, 0x2A, 0x0B, 0x08, 0x0D, 0x0E, 0x07, 0x04, 0x01, 
  0x02, 0x13, 0x10, 0x15, 0x16, 0x1F, 0x1C, 0x19, 0x1A };

// Simulate _mm_aesenc_si128 instructions from AESNI
__device__ void aesenc_double(unsigned char *s) 
{
    unsigned char v0,v1,v2,v3,v4,v5,v6,v7;
    unsigned char t0,t1,t2;

    v0 = sbox[s[0]];
    v1 = sbox[s[5]];
    v2 = sbox[s[10]];
    v3 = sbox[s[15]];
    v4 = sbox[s[3]];
    v5 = sbox[s[2]];
    v6 = sbox[s[1]];

    t0 = v0 ^ v1;
    t1 = v1 ^ v2;
    t2 = v2 ^ v3;
    s[0] = smod[t0] ^ v0 ^ t2;
    s[1] = smod[t1] ^ t0 ^ v3;
    s[2] = smod[t2] ^ v2 ^ t0;
    s[3] = smod[v3 ^ v0] ^ v3 ^ t1;

    v0 = sbox[s[4]];
    v1 = sbox[s[9]];
    v2 = sbox[s[14]];
    v3 = v4;
    v4 = sbox[s[7]];
    v7 = sbox[s[6]];

    t0 = v0 ^ v1;
    t1 = v1 ^ v2;
    t2 = v2 ^ v3;
    s[4] = smod[t0] ^ v0 ^ t2;
    s[5] = smod[t1] ^ t0 ^ v3;
    s[6] = smod[t2] ^ v2 ^ t0;
    s[7] = smod[v3 ^ v0] ^ v3 ^ t1;

    v0 = sbox[s[8]];
    v1 = sbox[s[13]];
    v2 = v5;
    v3 = v4;
    v5 = sbox[s[11]];

    t0 = v0 ^ v1;
    t1 = v1 ^ v2;
    t2 = v2 ^ v3;
    s[8] = smod[t0] ^ v0 ^ t2;
    s[9] = smod[t1] ^ t0 ^ v3;
    s[10] = smod[t2] ^ v2 ^ t0;
    s[11] = smod[v3 ^ v0] ^ v3 ^ t1;

    v0 = sbox[s[12]];
    v1 = v6;
    v2 = v7;
    v3 = v5;

    t0 = v0 ^ v1;
    t1 = v1 ^ v2;
    t2 = v2 ^ v3;
    s[12] = smod[t0] ^ v0 ^ t2;
    s[13] = smod[t1] ^ t0 ^ v3;
    s[14] = smod[t2] ^ v2 ^ t0;
    s[15] = smod[v3 ^ v0] ^ v3 ^ t1;

    v0 = sbox[s[0]];
    v1 = sbox[s[5]];
    v2 = sbox[s[10]];
    v3 = sbox[s[15]];
    v4 = sbox[s[3]];
    v5 = sbox[s[2]];
    v6 = sbox[s[1]];

    t0 = v0 ^ v1;
    t1 = v1 ^ v2;
    t2 = v2 ^ v3;
    s[0] = smod[t0] ^ v0 ^ t2;
    s[1] = smod[t1] ^ t0 ^ v3;
    s[2] = smod[t2] ^ v2 ^ t0;
    s[3] = smod[v3 ^ v0] ^ v3 ^ t1;

    v0 = sbox[s[4]];
    v1 = sbox[s[9]];
    v2 = sbox[s[14]];
    v3 = v4;
    v4 = sbox[s[7]];
    v7 = sbox[s[6]];

    t0 = v0 ^ v1;
    t1 = v1 ^ v2;
    t2 = v2 ^ v3;
    s[4] = smod[t0] ^ v0 ^ t2;
    s[5] = smod[t1] ^ t0 ^ v3;
    s[6] = smod[t2] ^ v2 ^ t0;
    s[7] = smod[v3 ^ v0] ^ v3 ^ t1;

    v0 = sbox[s[8]];
    v1 = sbox[s[13]];
    v2 = v5;
    v3 = v4;
    v5 = sbox[s[11]];

    t0 = v0 ^ v1;
    t1 = v1 ^ v2;
    t2 = v2 ^ v3;
    s[8] = smod[t0] ^ v0 ^ t2;
    s[9] = smod[t1] ^ t0 ^ v3;
    s[10] = smod[t2] ^ v2 ^ t0;
    s[11] = smod[v3 ^ v0] ^ v3 ^ t1;

    v0 = sbox[s[12]];
    v1 = v6;
    v2 = v7;
    v3 = v5;

    t0 = v0 ^ v1;
    t1 = v1 ^ v2;
    t2 = v2 ^ v3;
    s[12] = smod[t0] ^ v0 ^ t2;
    s[13] = smod[t1] ^ t0 ^ v3;
    s[14] = smod[t2] ^ v2 ^ t0;
    s[15] = smod[v3 ^ v0] ^ v3 ^ t1;
}


__device__ char hexbyte(int32_t c)
{
    c &= 0xf;
    if ( c < 10 )
        return('0'+c);
    else if ( c < 16 )
        return('a'+c-10);
    else return(0);
}

extern "C" {
void haraka512_gpu_wrapper(unsigned char *out_arr, uint32_t b0, uint32_t b1, uint32_t b2, uint32_t b3, uint32_t b4, uint32_t b5, uint32_t b6, uint32_t b7, uint32_t start) {
	haraka512_gpu<<<BLOCKS,THREADS>>>(out_arr, b0, b1, b2, b3, b4, b5, b6, b7, start);
}}

//__global__ void haraka512_gpu(unsigned char *out_arr, const unsigned char *in_arr)
__global__ void haraka512_gpu(unsigned char *out_arr, uint32_t b0, uint32_t b1, uint32_t b2, uint32_t b3, uint32_t b4, uint32_t b5, uint32_t b6, uint32_t b7, uint32_t start)
{
    uint32_t tid = threadIdx.x * BLOCKS + blockIdx.x;
    uint32_t *out = ((uint32_t *)out_arr  + tid * 8);
//    uint32_t  *in = ((uint32_t *)in_arr   + tid * 16); 

    uint32_t in[16];

    memset(in, 0x00, 16*sizeof(uint32_t));

//  for (i=0; i<NTHREAD; i++) {
	// fill arrays in local host memory

    in[0] = b0;
    in[1] = b1;
    in[2] = b2;
    in[3] = b3;
    in[4] = b4;
    in[5] = b5;
    in[6] = b6;
    in[7] = b7;

    in[8] = (uint32_t)(start + tid);
    // printf("start[%d] = %d, in[8] = %d\n", tid, start, in[8]);

        //printf("GPU indata[%d]: ", i); for (int z=0; z < 64; z++) { printf("%02x", *(haraka_in_arr + i * 64 + z)); } printf("\n");
//  }


//printf("in = "); for (i = 0; i < 64; i++) { printf("%02x", in[i]); } printf("\n");

    /* Debug printout */
    /*
    char debug_msg[64*2 + 1];
    for (int i = 0; i < 64; i++) { 
        debug_msg[i*2] = hexbyte(( (*((unsigned char *)in + i)) >>4) & 0xf);
        debug_msg[i*2 + 1] = hexbyte( (*((unsigned char *)in + i)) & 0xf);
    }
    debug_msg[64*2] = 0;
    printf("in[%d] = %s\n", tid, debug_msg);
    */

    unsigned char s[64];
    uint32_t *sd = (uint32_t*)(&s[0]);
    
    memcpy_decker(s, (unsigned char *)in, 64);

    // s = 000000000000000000000000000000000000000000000000000000000000000004000000a54be4ca851cb19b000d5e03f328e02c97bdae3789e47354daf45000
    // s = 00000000000000000000000000000000000000000000000800000000b7b7b7b704000000b7b7b7b704b7b7b7b7b7b7b7f302008800b7b7b700b7b7b702b7b7b7

//printf(" s = "); for (i = 0; i < 64; i++) { printf("%02x", s[i]); } printf("\n");

    for (int i = 0; i < 4; ++i) {

        aesenc_double(s);
        aesenc_double(s+16);
        aesenc_double(s+32);
        aesenc_double(s+48);

        // mixing
        uint32_t t;

        t=sd[0];
        sd[0]=sd[3];
        sd[3]=sd[15];
        sd[15]=sd[14];
        sd[14]=sd[6];
        sd[6]=sd[12];
        sd[12]=sd[2];
        sd[2]=sd[7];
        sd[7]=sd[4];
        sd[4]=sd[8];
        sd[8]=sd[9];
        sd[9]=sd[1];
        sd[1]=sd[11];
        sd[11]=sd[5];
        sd[5]=t;

        t=sd[13];
        sd[13]=sd[10];
        sd[10]=t;
    }

    aesenc_double(s);
    aesenc_double(s+16);
    aesenc_double(s+32);
    aesenc_double(s+48);

    __syncthreads();

    *out++ = sd[7] ^ in[2];
    *out++ = sd[15] ^ in[3];
    *out++ = sd[12] ^ in[6];
    *out++ = sd[4] ^ in[7];
    *out++ = sd[9] ^ in[8];
    *out++ = sd[1] ^ in[9];
    *out++ = sd[2] ^ in[12];
    *out   = sd[10] ^ in[13];

    __syncthreads();
}

